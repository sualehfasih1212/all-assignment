{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('ali', 'umer', 'ghaus')\n"
     ]
    }
   ],
   "source": [
    "tp = ('ali','umer','ghaus')\n",
    "print(tp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (<ipython-input-8-efca8177d28b>, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-8-efca8177d28b>\"\u001b[1;36m, line \u001b[1;32m2\u001b[0m\n\u001b[1;33m    value2 =input(\"enter 2st number\")\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    " value1 =input(\"enter 1st number\")\n",
    "    value2 =input(\"enter 2st number\")\n",
    "    operator =input(\"enter operator\")\n",
    "    if operator =='+';\n",
    "    value=value1+value2\n",
    "    print(value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter 1st number1\n",
      "enter 2nd number2\n",
      "enter operature+\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "invalid literal for int() with base 10: '+'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-16-acacee0cc674>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mval1\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minput\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"enter 1st number\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0mval2\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minput\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"enter 2nd number\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0moper\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minput\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"enter operature\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mval\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mval1\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0mval2\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: invalid literal for int() with base 10: '+'"
     ]
    }
   ],
   "source": [
    "val1=int(input(\"enter 1st number\"))\n",
    "val2=int(input(\"enter 2nd number\"))\n",
    "oper=int(input(\"enter operature\"))\n",
    "\n",
    "val=val1 + val2\n",
    "print(val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-19-637322226b57>, line 4)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-19-637322226b57>\"\u001b[1;36m, line \u001b[1;32m4\u001b[0m\n\u001b[1;33m    if operation=='+';\u001b[0m\n\u001b[1;37m                     ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "val1=int(input(\"enter 1st number\"))\n",
    "val2=int(input(\"enter 2nd number\"))\n",
    "operation=int(input(\"enter operature\"))\n",
    "if operation=='+';\n",
    "val=val1 + val2\n",
    "print(val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "expected an indented block (<ipython-input-23-83b42540e042>, line 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-23-83b42540e042>\"\u001b[1;36m, line \u001b[1;32m5\u001b[0m\n\u001b[1;33m    val1=int(val1)\u001b[0m\n\u001b[1;37m       ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m expected an indented block\n"
     ]
    }
   ],
   "source": [
    "val1=input(\"enter 1st number\")\n",
    "val2=input(\"enter 2nd number\")\n",
    "oper=input(\"enter operature\")\n",
    "if oper =='+':\n",
    "val1=int(val1)\n",
    "val2=int(val2)\n",
    "val=val1 + val2\n",
    "print(val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter 1st number23\n",
      "enter 2nd number23\n",
      "enter operature+\n",
      "46\n"
     ]
    }
   ],
   "source": [
    "val1=input(\"enter 1st number\")\n",
    "val2=input(\"enter 2nd number\")\n",
    "oper=input(\"enter operature\")\n",
    "val1=int(val1)\n",
    "val2=int(val2)\n",
    "val=val1 + val2\n",
    "print(val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "expected an indented block (<ipython-input-30-5a1b2e89f628>, line 7)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-30-5a1b2e89f628>\"\u001b[1;36m, line \u001b[1;32m7\u001b[0m\n\u001b[1;33m    val= val1 + val2\u001b[0m\n\u001b[1;37m      ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m expected an indented block\n"
     ]
    }
   ],
   "source": [
    "val1=input(\"enter 1st number\")\n",
    "val2=input(\"enter 2nd number\")\n",
    "oper=input(\"enter operature\")\n",
    "val1=int(val1)\n",
    "val2=int(val2)\n",
    "if oper =='+':\n",
    "val = val1 + val2\n",
    "print(val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter 1st number2\n",
      "enter 2nd number2\n",
      "enter operature+\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "val1=input(\"enter 1st number\")\n",
    "val2=input(\"enter 2nd number\")\n",
    "oper=input(\"enter operature\")\n",
    "val1=int(val1)\n",
    "val2=int(val2)\n",
    "if oper =='+':\n",
    "    v=val1 + val2\n",
    "    print(v)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter 1st number2\n",
      "enter 2nd number2\n",
      "enter operature-\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "val1=input(\"enter 1st number\")\n",
    "val2=input(\"enter 2nd number\")\n",
    "oper=input(\"enter operature\")\n",
    "val1=int(val1)\n",
    "val2=int(val2)\n",
    "if oper =='+':\n",
    "    v=val1 + val2\n",
    "    print(v)\n",
    "elif oper =='-':\n",
    "    v=val1 -val2\n",
    "    print(v)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter 1st number10\n",
      "enter 2nd number2\n",
      "enter operature/\n",
      "5.0\n"
     ]
    }
   ],
   "source": [
    "val1=input(\"enter 1st number\")\n",
    "val2=input(\"enter 2nd number\")\n",
    "oper=input(\"enter operature\")\n",
    "val1=int(val1)\n",
    "val2=int(val2)\n",
    "if oper =='+':\n",
    "    v=val1 + val2\n",
    "    print(v)\n",
    "elif oper =='-':\n",
    "    v=val1 -val2\n",
    "    print(v)\n",
    "elif oper =='*':\n",
    "    v=val1 * val2\n",
    "    print(v)\n",
    "elif oper =='/':\n",
    "    v=val1 / val2\n",
    "    print(v)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
